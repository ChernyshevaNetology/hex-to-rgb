{"version":3,"sources":["components/Converter.tsx","App.tsx","utils/index.ts","index.js"],"names":["Converter","val","handleVal","bg","error","style","backgroundColor","className","maxLength","value","onChange","type","App","useState","setVal","setBg","setError","useEffect","length","str","check","slice","every","letter","includes","validate","hex","r","parseInt","g","b","join","parseColor","event","currentTarget","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8MASMA,EAAgC,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,IAAKC,EAA2B,EAA3BA,UAAWC,EAAgB,EAAhBA,GAAIC,EAAY,EAAZA,MAC3D,OACE,qBACEC,MAAO,CAAEC,gBAAiBF,EAAQ,SAAWD,GAC7CI,UAAU,YAFZ,SAIE,iCACE,uBACEC,UAAW,EACXC,MAAOR,EACPS,SAAUR,EACVK,UAAU,cACVI,KAAK,SAEP,qBAAKJ,UAAU,kBAAf,SAAkCH,EAAQ,uCAAWD,UCM9CS,G,MAxBH,WACV,MAAsBC,mBAAiB,IAAvC,mBAAOZ,EAAP,KAAYa,EAAZ,KACA,EAAoBD,mBAAiB,IAArC,mBAAOV,EAAP,KAAWY,EAAX,KACA,EAA0BF,oBAAkB,GAA5C,mBAAOT,EAAP,KAAcY,EAAd,KAGAC,qBAAU,WAFY,IAGhBhB,EAAIiB,UCJY,SAACC,GACvB,IAAMC,EAAQ,CACZ,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAEF,OACiB,IAAfD,EAAID,QACO,MAAXC,EAAI,IACJ,YAAIA,EAAIE,MAAM,IAAIC,OAAM,SAACC,GAAD,OAAYH,EAAMI,SAASD,MDjB7CE,CAASxB,GAIXe,GAAS,IAHTA,GAAS,GACTD,ECfkB,SAACW,GACzB,IAAMC,EAAIC,SAASF,EAAI,GAAKA,EAAI,GAAI,IAC9BG,EAAID,SAASF,EAAI,GAAKA,EAAI,GAAI,IAC9BI,EAAIF,SAASF,EAAI,GAAKA,EAAI,GAAI,IAEpC,MAAM,OAAN,OAAc,CAACC,EAAGE,EAAGC,GAAGC,KAAK,KAA7B,KDUYC,CAAW/B,QAKpB,CAACA,EAAKG,IAMT,OAAO,cAAC,EAAD,CAAWH,IAAKA,EAAKE,GAAIA,EAAID,UAJlB,SAAC+B,GACjBnB,EAAOmB,EAAMC,cAAczB,QAG6BL,MAAOA,MEtBnE+B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.23e2a610.chunk.js","sourcesContent":["import React, { FC, ChangeEvent } from \"react\";\n\ninterface ConverterProps {\n  val: string;\n  handleVal: (event: ChangeEvent<HTMLInputElement>) => void;\n  bg: string;\n  error: boolean;\n}\n\nconst Converter: FC<ConverterProps> = ({ val, handleVal, bg, error }) => {\n  return (\n    <div\n      style={{ backgroundColor: error ? \"tomato\" : bg }}\n      className=\"container\"\n    >\n      <form>\n        <input\n          maxLength={7}\n          value={val}\n          onChange={handleVal}\n          className=\"color-input\"\n          type=\"text\"\n        />\n        <div className=\"converted-value\">{error ? \"ОШИБКА\" : bg}</div>\n      </form>\n    </div>\n  );\n};\n\nexport { Converter };\n","import React, { ChangeEvent, useState, useEffect } from \"react\";\nimport { validate, parseColor } from \"./utils\";\nimport { Converter } from \"components/Converter\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [val, setVal] = useState<string>(\"\");\n  const [bg, setBg] = useState<string>(\"\");\n  const [error, setError] = useState<boolean>(false);\n  const validColorLen = 7;\n\n  useEffect(() => {\n    if (val.length === validColorLen) {\n      if (validate(val)) {\n        setError(false);\n        setBg(parseColor(val));\n      } else {\n        setError(true);\n      }\n    }\n  }, [val, error]);\n\n  const handleVal = (event: ChangeEvent<HTMLInputElement>): void => {\n    setVal(event.currentTarget.value);\n  };\n\n  return <Converter val={val} bg={bg} handleVal={handleVal} error={error} />;\n};\n\nexport default App;\n","export const parseColor = (hex: string): string => {\n  const r = parseInt(hex[1] + hex[2], 16);\n  const g = parseInt(hex[3] + hex[4], 16);\n  const b = parseInt(hex[5] + hex[6], 16);\n\n  return `rgb(${[r, g, b].join(\",\")})`;\n};\n\nexport const validate = (str: string): boolean => {\n  const check = [\n    \"0\",\n    \"1\",\n    \"2\",\n    \"3\",\n    \"4\",\n    \"5\",\n    \"6\",\n    \"7\",\n    \"8\",\n    \"9\",\n    \"a\",\n    \"b\",\n    \"c\",\n    \"d\",\n    \"e\",\n    \"f\",\n  ];\n  return (\n    str.length === 7 &&\n    str[0] === \"#\" &&\n    [...str.slice(1)].every((letter) => check.includes(letter))\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}